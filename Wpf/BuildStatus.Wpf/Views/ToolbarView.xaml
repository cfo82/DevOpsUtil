<UserControl x:Class="DevOpsUtil.BuildStatus.Wpf.Views.ToolbarView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:converter="clr-namespace:DevOpsUtil.Wpf.Core.Converter;assembly=Wpf.Core"
             mc:Ignorable="d"
             d:DesignHeight="300" d:DesignWidth="300">
    <UserControl.Resources>
        <SolidColorBrush x:Key="ToolBarButtonHoverBorder" Color="#80DADADA" />
        <SolidColorBrush x:Key="ToolBarButtonChecked" Color="#400080FF" />
        <SolidColorBrush x:Key="ToolBarButtonHover" Color="#210080FF" />
        <SolidColorBrush x:Key="ToolBarButtonPressedBorder" Color="#90006CD9" />
        <SolidColorBrush x:Key="ToolBarButtonPressed" Color="#400080FF" />
        <Style x:Key="CustomToggleButtonStyle" TargetType="{x:Type ToggleButton}">
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter Property="Padding" Value="2" />
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="BorderBrush" Value="Transparent" />
            <Setter Property="HorizontalAlignment" Value="Center" />
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="HorizontalContentAlignment" Value="Center" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}"
                                SnapsToDevicePixels="true">
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="true">
                                <!--<Setter Property="BorderBrush" Value="{StaticResource ToolBarButtonHoverBorder}"/>-->
                                <!--<Setter Property="Background" Value="{StaticResource ToolBarButtonChecked}"/>-->
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="BorderBrush" Value="{StaticResource ToolBarButtonHoverBorder}" />
                                <Setter Property="Background" Value="{StaticResource ToolBarButtonHover}" />
                            </Trigger>
                            <Trigger Property="IsKeyboardFocused" Value="true">
                                <Setter Property="BorderBrush" Value="{StaticResource ToolBarButtonHoverBorder}" />
                                <Setter Property="Background" Value="{StaticResource ToolBarButtonHover}" />
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsMouseOver" Value="true" />
                                    <Condition Property="IsChecked" Value="true" />
                                </MultiTrigger.Conditions>
                                <Setter Property="BorderBrush" Value="{StaticResource ToolBarButtonPressedBorder}" />
                                <Setter Property="Background" Value="{StaticResource ToolBarButtonPressed}" />
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsKeyboardFocused" Value="true" />
                                    <Condition Property="IsChecked" Value="true" />
                                </MultiTrigger.Conditions>
                                <Setter Property="BorderBrush" Value="{StaticResource ToolBarButtonPressedBorder}" />
                                <Setter Property="Background" Value="{StaticResource ToolBarButtonPressed}" />
                            </MultiTrigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="BorderBrush" Value="{StaticResource ToolBarButtonPressedBorder}" />
                                <Setter Property="Background" Value="{StaticResource ToolBarButtonPressed}" />
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground"
                                        Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </UserControl.Resources>
    <Grid>
        <ToolBar Grid.Row="0">
            <ToggleButton IsChecked="{Binding IsActiveOnStartup}" ToolTip="Active on Startup?"
                          Style="{DynamicResource CustomToggleButtonStyle}">
                <Grid>
                    <Image Source="/Images/if_arrow_up_32.png" Width="32" Height="32"
                           Visibility="{Binding IsActiveOnStartup, Converter={converter:BoolToVisibilityConverter}}" />
                    <Image Source="/Images/if_arrow_up_32_gray.png" Width="32" Height="32"
                           Visibility="{Binding IsActiveOnStartup, Converter={converter:BoolToVisibilityConverter}, ConverterParameter=True}" />
                </Grid>
            </ToggleButton>
            <Button Command="{Binding RefreshCommand}"
                    IsEnabled="{Binding IsRefreshInProgress, Converter={converter:InvertBoolConverter}}"
                    ToolTip="Refresh Definitions and Status">
                <Image Source="/Images/if_arrow_refresh_32.png" Width="32" Height="32" />
            </Button>
        </ToolBar>
    </Grid>
</UserControl>